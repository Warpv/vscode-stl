{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Statement List",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#numerics"
		},
		{
			"include": "#storage"
		},
		{
			"include": "#functions"
		},
		{
            "include": "#operators"
        },
		{
			"include": "#variable"
		},
		{
			"name": "variable.name.labels.stl",
			"match": "^\\%*.*:"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"name": "keyword.control.stl",
				"match": "\\b(A|AN|O|ON|X|XN|FX|FP|R|S|NOT|SET|CLR|SAVE)\\b"
			},
			{
				"name": "invalid.st",
				"match": "#"
			}]
		},
		"variable":{
			"patterns": [{
				"name": "variable.name.labels.stl",
				"match": "^\\%*.*:"
			},
			{
				"name": "variable.name.stl",
				"match": "\\b(I|R|D|M)\\b"
			}]
		},
		"strings": {
			"name": "string.quoted.double.stl",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.stl",
					"match": "\\\\."
				}
			]
		},
		"comments": {
			"patterns": [{
					"name": "comment.stl",
					"match": "//.*$"
				},
				{
					"name": "comment.block.stl",
					"begin": "/\\*",
					"end": "\\*/"
				}
			]
		},
		"numerics": {
			"patterns": [
				{
					"name": "constant.numeric.dec.stl",
					"match": "#?-?[0-9\\.]+\\b"
				},
				{
					"name": "constant.numeric.hex.stl",
					"match": "#-?0x[0-9a-fA-F]+\\b"
				},
				{
					"name": "constant.character.stl",
					"match": "#?\\'\\\\?.\\'"
				},
				{
					"name": "constant.other.stl",
					"match": "#\\(.*\\)"
				}
			]
		},
		"variable": {
			"patterns": [{
				"name": "variable.name.labels.stl",
				"match": "\\%*.*"
				}
			]
		},
		"storage": {
			"name": "storage.datablocks.stl",
			"match": "\\b(OPN|CDB|L DBLG|L DBNO|L DILG|L sDINO)\\b"
		},
		"functions": {
			"patterns": [
				{
					"name": "support.function.stl",
					"match": "\\b(?:JU|JL|JC|JCN|JNB|JBI|JNBI|JO|JOS|JZ|JN|JP|JM|JPZ|JMZ|JUO|LOOP)(?=\\()"
				},
				{
					"begin": "([a-zA-Z_0-9]+)(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.stl"
						},
						"2": {
							"name": "punctuation.parenthesis.begin.stl"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.end.stl"
						}
					}
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.assignment.stl",
					"match": "(+I|+R|+D|-I|-R|-D|*I|*R|*D|/I|/R|/D)"
				},
				{
					"name": "keyword.operator.bitlogical.stl",
					"match": "\\b(A|AN|O|ON|X|XN|FN|FP|R|S|NOT|SET|CLR|SAVE|AW|AD|OW|OD|XOW|XOD)\\b|&"
				},
				{
					"name": "keyword.operator.comparison.stl",
					"match": "(?:<>|<|=|>|<=|>=|==)"
				},
				{
					"name": "keyword.operator.arithmetic.stl",
					"match": "(?:\\+|\\-|\\/|\\*|MOD)"
				},
				{
					"name": "keyword.operator.arithmetic.stl",
					"match": "\\b(?:ABS|SIN|ABS|ACOS|ASIN|ATAN|COS|EXP|EXPT|LN|LOG|SIN|SQRT|TAN|SEL|MUX|SHL|SHR|ROL|ROR|ADD|DIV|MUL|SUB|MAX|MIN|ADR(INstl)?|SIZE(OF)?|BIT_?ADR|TRUNC(_INT)?)(?=\\()"
				}
			]
		}
	},
	"scopeName": "source.stl"
}